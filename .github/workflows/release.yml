name: Release OpenMRS Module on Tag (Using GitHub CLI)

on:
  push:
    tags:
      - 'v*.*.*' # This workflow will run when a tag matching vX.Y.Z is pushed

jobs:
  build_and_release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 8 # Or the JDK version required by your module
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'adopt'
          cache: maven

      - name: Build with Maven
        run: mvn clean install -DskipTests # Build the module and create the OMOD

      - name: Get module version from POM
        id: get_version
        run: echo "MODULE_VERSION=$(mvn help:evaluate -q -Dexpression=project.version -P!standard-release-profile)" >> $GITHUB_ENV
        # This step extracts the project version from the pom.xml

      - name: Create GitHub Release and Upload Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub automatically provides this token
        run: |
          # Get the tag name from the ref (e.g., refs/tags/v1.0.0 -> v1.0.0)
          TAG_NAME=${{ github.ref }}
          TAG_NAME=${TAG_NAME#refs/tags/}
          
          # Get the path to the generated OMOD file (assuming only one .omod in target)
          OMOD_PATH=$(find omod/target -name "*.omod" -print -quit)
          
          # Create the release using GitHub CLI
          # The '--generate-notes' flag can automatically generate release notes based on commits
          # Alternatively, you can provide a file with '--notes-file <file>' or a string with '--notes "Release details..."'
          gh release create "$TAG_NAME" "$OMOD_PATH" \
            --repo "$GITHUB_REPOSITORY" \
            --title "Release ${{ env.MODULE_VERSION }}" \
            --generate-notes # Or provide custom release notes